// loginByCookie.js (ESM)
// Flow:
// 1) ƒê·ªçc .env (NETFLIX_EMAIL, NETFLIX_PASSWORD, COOKIE_FILE)
// 2) Th·ª≠ login b·∫±ng cookies -> n·∫øu fail th√¨ login b·∫±ng t√†i kho·∫£n/m·∫≠t kh·∫©u v√† T·ª∞ L∆ØU cookies
// 3) M·ªü h·ªì s∆° theo t√™n/ID -> √©p v√†o /settings/lock/<ID>
// 4) N·∫øu th·∫•y "X√≥a kh√≥a h·ªì s∆°" th√¨ g·ª° tr∆∞·ªõc (∆ØU TI√äN REMOVE n·∫øu c√πng l√∫c c√≥ Remove/Edit)
// 5) V√†o pinentry -> nh·∫≠p PIN 4 s·ªë -> Save (tuy·ªát ƒë·ªëi kh√¥ng click Edit PIN)

import 'dotenv/config';
import fs from 'fs';
import path from 'path';
import puppeteer from 'puppeteer';

/* ====== CONFIG ====== */
const USER_DATA_DIR = process.env.USER_DATA_DIR || './chrome-profile';
const COOKIE_FILE   = process.env.COOKIE_FILE   || './cookies.json';
const HARDCODED_PASSWORD = process.env.ACCOUNT_PASSWORD || 'minhnetflix'; // m·∫≠t kh·∫©u x√°c th·ª±c PIN
const NETFLIX_EMAIL    = process.env.NETFLIX_EMAIL || '';     // d√πng khi cookie h·ªèng
const NETFLIX_PASSWORD = process.env.NETFLIX_PASSWORD || '';  // d√πng khi cookie h·ªèng

/* ====== Graceful shutdown ====== */
let browser; // ƒë·ªÉ cleanup d√πng ƒë∆∞·ª£c
let page;

async function cleanup(exitCode = 0) {
  try { await page?.close().catch(() => {}); } catch {}
  try { await browser?.close().catch(() => {}); } catch {}
  process.exit(exitCode);
}

process.on('SIGINT',  () => { console.log('\nüõë SIGINT (Ctrl+C) ‚Üí ƒë√≥ng tr√¨nh duy·ªát...'); cleanup(0); });
process.on('SIGTERM', () => { console.log('\nüõë SIGTERM ‚Üí ƒë√≥ng tr√¨nh duy·ªát...'); cleanup(0); });
process.on('uncaughtException', (err) => { console.error('üí• uncaughtException:', err); cleanup(1); });
process.on('unhandledRejection', (reason) => {
  const msg = String(reason && (reason.message || reason));
  if (/Execution context was destroyed|Cannot find context|Target closed/i.test(msg)) {
    console.warn('‚ö†Ô∏è Ignored benign rejection: context destroyed due to navigation.');
    return; // l·ªói v√¥ h·∫°i khi trang ƒëi·ªÅu h∆∞·ªõng
  }
  console.error('üí• unhandledRejection:', reason);
  cleanup(1);
});

/* ====== Helpers ====== */
const sleep = (ms) => new Promise((r) => setTimeout(r, ms));
function isBenignNavError(err) {
  const msg = String(err?.message || err);
  return /Execution context was destroyed|Cannot find context|Target closed|frame got detached/i.test(msg);
}

// ch·∫°y eval/click an to√†n: nu·ªët l·ªói do ƒëi·ªÅu h∆∞·ªõng
async function safeRun(fn, fallback = false) {
  try { return await fn(); }
  catch (e) { if (isBenignNavError(e)) return fallback; throw e; }
}
function findChromePath() {
  const home = process.env.USERPROFILE || process.env.HOME || '';
  const candidates = [
    process.env.CHROME_PATH,
    'C:\\Program Files\\Google\\Chrome\\Application\\chrome.exe',
    'C:\\Program Files (x86)\\Google\\Chrome\\Application\\chrome.exe',
    path.join(home, 'AppData\\Local\\Google\\Chrome\\Application\\chrome.exe'),
  ].filter(Boolean);

  for (const p of candidates) {
    try { if (p && fs.existsSync(p)) return p; } catch {}
  }
  throw new Error('Kh√¥ng t√¨m th·∫•y chrome.exe. H√£y c√†i Chrome ho·∫∑c set CHROME_PATH tr·ªè ƒë√∫ng file chrome.exe');
}

function loadCookies(filePath = COOKIE_FILE) {
  if (!fs.existsSync(filePath)) return null;
  const raw = JSON.parse(fs.readFileSync(filePath, 'utf-8'));
  if (Array.isArray(raw)) return { url: 'https://www.netflix.com', cookies: raw };
  if (raw && Array.isArray(raw.cookies))
    return { url: raw.url || 'https://www.netflix.com', cookies: raw.cookies };
  throw new Error('cookies.json sai ƒë·ªãnh d·∫°ng (m·∫£ng ho·∫∑c { url, cookies:[...] })');
}

const sameSiteMap = {
  no_restriction: 'None',
  None: 'None',
  lax: 'Lax',
  Lax: 'Lax',
  strict: 'Strict',
  Strict: 'Strict',
};

function toCookies(bundle) {
  return (bundle.cookies || []).map((c) => {
    const out = {
      name: c.name,
      value: c.value,
      path: c.path || '/',
      httpOnly: !!c.httpOnly,
      secure: !!c.secure,
      sameSite: c.sameSite ? sameSiteMap[c.sameSite] : undefined,
    };
    if (typeof c.expirationDate === 'number') {
      out.expires = Math.round(c.expirationDate);
    }
    if (c.domain) {
      out.domain = c.domain;
    } else {
      out.url = bundle.url || 'https://www.netflix.com';
    }
    if (out.sameSite === 'None' && !out.secure) out.secure = true;
    return out;
  });
}

async function saveCurrentCookies(page, filePath = COOKIE_FILE) {
  let cookies = [];
  try { cookies = await page.cookies('https://www.netflix.com/'); } catch {}
  if (!cookies?.length) { try { cookies = await page.cookies(); } catch {} }
  if (!cookies?.length) {
    console.log('‚ö†Ô∏è Kh√¥ng thu ƒë∆∞·ª£c cookie n√†o ƒë·ªÉ l∆∞u.');
    return false;
  }
  const out = { url: 'https://www.netflix.com', cookies };
  fs.writeFileSync(filePath, JSON.stringify(out, null, 2), 'utf-8');
  console.log(`üíæ ƒê√£ l∆∞u cookies v√†o ${filePath} (${cookies.length} items).`);
  return true;
}

async function isErrorPage(page) {
  const t = await page.evaluate(() => document.body?.innerText || '');
  return /NSES[- ]?UHX/i.test(t) || /ƒê√£ x·∫£y ra l·ªói/i.test(t) || /An error occurred/i.test(t);
}

async function gentleReveal(page) {
  for (let i = 0; i < 2; i++) {
    await page.evaluate(() => window.scrollBy(0, window.innerHeight));
    await sleep(100);
  }
  await page.evaluate(() => window.scrollTo(0, 0));
}

async function isLoggedIn(page) {
  await page.goto('https://www.netflix.com/account/profiles', { waitUntil: 'networkidle2', timeout: 60000 }).catch(()=>{});
  const url = page.url();
  if (/\/login|signin/i.test(url)) return false;
  const hasLoginForm = await page.$('#id_userLoginId, input[name="userLoginId"]');
  if (hasLoginForm) return false;
  const txt = (await page.evaluate(() => document.body?.innerText || '')).toLowerCase();
  if (txt.includes('sign in') && (await page.$('form[action*="/login"]'))) return false;
  return true;
}

/* ====== Credential login (fallback khi cookie fail) ====== */
async function loginWithCredentials(page, email, password) {
  if (!email || !password) {
    console.log('‚ùå Thi·∫øu NETFLIX_EMAIL ho·∫∑c NETFLIX_PASSWORD trong .env ƒë·ªÉ ƒëƒÉng nh·∫≠p fallback.');
    return false;
  }

  console.log('üîê ƒêang ƒëƒÉng nh·∫≠p b·∫±ng t√†i kho·∫£n/m·∫≠t kh·∫©u‚Ä¶');
  await page.goto('https://www.netflix.com/login', { waitUntil: 'networkidle2', timeout: 60000 });

  const emailSel = '#id_userLoginId, input[name="userLoginId"]';
  const passSel  = '#id_password, input[name="password"]';
  const btnSel   = 'button[type="submit"]';

  const emailBox = await page.waitForSelector(emailSel, { visible: true, timeout: 15000 }).catch(()=>null);
  const passBox  = await page.waitForSelector(passSel,  { visible: true, timeout: 15000 }).catch(()=>null);
  if (!emailBox || !passBox) {
    console.log('‚ùå Kh√¥ng t√¨m th·∫•y form ƒëƒÉng nh·∫≠p.');
    return false;
  }

  await emailBox.click({ clickCount: 3 });
  await page.keyboard.type(email, { delay: 30 });
  await passBox.click({ clickCount: 3 });
  await page.keyboard.type(password, { delay: 30 });

  const btn = await page.$(btnSel);
  if (btn) { try { await btn.click({ delay: 20 }); } catch {} } else { await page.keyboard.press('Enter'); }

  const ok = await Promise.race([
    page.waitForFunction(() => /\/(browse|profiles|account)/i.test(location.pathname), { timeout: 30000 }).then(()=>true).catch(()=>false),
    page.waitForNavigation({ waitUntil: 'networkidle2', timeout: 30000 }).then(()=>/\/(browse|profiles|account)/i.test(page.url())).catch(()=>false),
  ]);

  if (!ok) {
    console.log('‚ö†Ô∏è Kh√¥ng x√°c nh·∫≠n ƒë∆∞·ª£c ƒëƒÉng nh·∫≠p (c√≥ th·ªÉ c·∫ßn x√°c minh/MFA).');
    if (await isLoggedIn(page)) return true;
    return false;
  }

  console.log('‚úÖ ƒêƒÉng nh·∫≠p th√†nh c√¥ng b·∫±ng t√†i kho·∫£n/m·∫≠t kh·∫©u.');
  await saveCurrentCookies(page, COOKIE_FILE);
  return true;
}

/* ============== Qu√©t & m·ªü h·ªì s∆° theo t√™n ============== */
async function getProfileNames(page) {
  return await page.evaluate(() => {
    const blocks = Array.from(document.querySelectorAll('[data-cl-view="accountProfileSettings"]'));
    const names = blocks.map((b, i) =>
      (b.querySelector('p')?.textContent || b.textContent || `H·ªì s∆° ${i + 1}`)
        .trim()
        .split('\n')[0]
    );
    const seen = new Set();
    return names.filter((n) => (seen.has(n) ? false : (seen.add(n), true)));
  });
}

async function resolveProfileTarget(page, profileName) {
  return await page.evaluate((name) => {
    const blocks = Array.from(document.querySelectorAll('[data-cl-view="accountProfileSettings"]'));
    const block = blocks.find((b) => {
      const first =
        ((b.querySelector('p')?.textContent || b.textContent || '') + '')
          .trim()
          .split('\n')[0];
      return first === name;
    });
    if (!block) return null;

    const li = block.closest('li') || block.parentElement;
    const btn =
      (li && li.querySelector('button[data-uia$="PressableListItem"]')) ||
      block.closest('button[data-uia$="PressableListItem"]') ||
      block.querySelector('button[data-uia$="PressableListItem"]') ||
      block;

    const r = btn.getBoundingClientRect();
    return {
      selector: btn.getAttribute('data-uia')
        ? `button[data-uia="${btn.getAttribute('data-uia')}"]`
        : null,
      rect: { x: Math.floor(r.left + r.width / 2), y: Math.floor(r.top + r.height / 2) },
    };
  }, profileName);
}

async function dispatchRealClick(page, selector) {
  if (!selector) return false;
  return await page.evaluate((sel) => {
    const el = document.querySelector(sel);
    if (!el) return false;
    el.scrollIntoView({ block: 'center', inline: 'center' });
    el.focus();
    const opts = { bubbles: true, cancelable: true, view: window, buttons: 1 };
    el.dispatchEvent(new PointerEvent('pointerdown', opts));
    el.dispatchEvent(new MouseEvent('mousedown', opts));
    el.dispatchEvent(new MouseEvent('mouseup', opts));
    el.dispatchEvent(new PointerEvent('pointerup', opts));
    el.dispatchEvent(new MouseEvent('click', opts));
    return true;
  }, selector);
}

function extractSettingsId(u) {
  const m = u.match(/\/settings\/([^/?#]+)/i);
  return m ? m[1] : null;
}

async function openProfileAndGetId(page, profileName, retries = 5) {
  for (let i = 1; i <= retries; i++) {
    console.log(`üëâ M·ªü h·ªì s∆° ${profileName} (l·∫ßn ${i}/${retries})`);
    const target = await resolveProfileTarget(page, profileName);
    if (!target) {
      console.log('‚ùå Kh√¥ng th·∫•y h·ªì s∆°:', profileName);
      return null;
    }
    await page.evaluate(
      ({ x, y }) => window.scrollTo(0, Math.max(0, y - window.innerHeight / 2)),
      target.rect
    );
    const didDispatch = await dispatchRealClick(page, target.selector);
    if (!didDispatch) {
      await page.mouse.move(target.rect.x, target.rect.y, { steps: 6 });
      await page.mouse.down(); await sleep(30); await page.mouse.up();
    }
    await Promise.race([
      page.waitForNavigation({ waitUntil: 'networkidle2', timeout: 8000 }).catch(() => null),
      page.waitForFunction(() => /\/settings\//i.test(location.pathname), { timeout: 8000 }).catch(() => null),
    ]);
    if (await isErrorPage(page)) {
      console.log('‚ö†Ô∏è Trang l·ªói sau khi m·ªü h·ªì s∆° ‚Üí reload‚Ä¶');
      try { await page.goto(page.url(), { waitUntil: 'networkidle2', timeout: 60000 }); } catch {}
    }
    const id = extractSettingsId(page.url());
    if (id) {
      const settingsUrl = page.url();
      console.log('‚úÖ L·∫•y ƒë∆∞·ª£c settingsId:', id, '(', settingsUrl, ')');
      return { id, settingsUrl };
    }
    await page.goto('https://www.netflix.com/account/profiles', { waitUntil: 'networkidle2', timeout: 60000 });
    await gentleReveal(page);
    await sleep(300 + i * 200);
  }
  console.log('‚ùå Kh√¥ng l·∫•y ƒë∆∞·ª£c settingsId cho:', profileName);
  return null;
}

/* ============== Click helpers ============== */
async function clickWithAllTricks(page, handle) {
  try { await page.evaluate(el => el.scrollIntoView({ block: 'center', inline: 'center' }), handle); } catch {}
  try { await page.evaluate(el => el.click(), handle); return true; } catch {}
  try { await handle.click({ delay: 20 }); return true; } catch {}
  try {
    await page.evaluate(el => {
      el.focus();
      const opts = { bubbles: true, cancelable: true, view: window, buttons: 1 };
      el.dispatchEvent(new PointerEvent('pointerdown', opts));
      el.dispatchEvent(new MouseEvent('mousedown', opts));
      el.dispatchEvent(new MouseEvent('mouseup', opts));
      el.dispatchEvent(new PointerEvent('pointerup', opts));
      el.dispatchEvent(new MouseEvent('click', opts));
    }, handle);
    return true;
  } catch {}
  try {
    const box = await handle.boundingBox();
    if (box) {
      await page.mouse.move(box.x + box.width/2, box.y + box.height/2, { steps: 6 });
      await page.mouse.down(); await sleep(30); await page.mouse.up();
      return true;
    }
  } catch {}
  return false;
}

async function queryInAllFrames(page, selector) {
  const frames = page.frames();
  for (const f of frames) {
    try {
      const h = await f.$(selector);
      if (h) return { frame: f, handle: h };
    } catch (e) {
      const msg = String(e && (e.message || e));
      if (!/Execution context was destroyed|Cannot find context|Target closed/i.test(msg)) {
        // swallow quietly
      }
    }
  }
  return null;
}

// B·∫•m "X√≥a h·ªì s∆°" l·∫ßn 2 trong modal (ƒë√∫ng selector Netflix d√πng cho destructive)
async function clickSecondDeleteButton(page, { timeoutMs = 6000 } = {}) {
  const SELECTOR =
    'button[data-uia="profile-settings-page+delete-profile+destructive-button"][data-cl-view="deleteProfile"]';

  const deadline = Date.now() + timeoutMs;
  while (Date.now() < deadline) {
    // ∆Øu ti√™n frame c√≥ dialog/modal
    const frames = page.frames();
    for (const f of frames) {
      const hasDialog = await f.$('div[role="dialog"], [data-uia="modal"], [aria-modal="true"]').catch(()=>null);
      if (!hasDialog) continue;

      const btn = await f.$(SELECTOR);
      if (btn) {
        // cu·ªôn + click an to√†n
        try { await f.evaluate(el => el.scrollIntoView({block:'center',inline:'center'}), btn); } catch {}
        try { await btn.click({ delay: 20 }); return true; } catch {}
        try {
          await f.evaluate(el => {
            el.focus();
            const o = { bubbles:true, cancelable:true, view:window, buttons:1 };
            el.dispatchEvent(new PointerEvent('pointerdown', o));
            el.dispatchEvent(new MouseEvent('mousedown', o));
            el.dispatchEvent(new MouseEvent('mouseup', o));
            el.dispatchEvent(new PointerEvent('pointerup', o));
            el.dispatchEvent(new MouseEvent('click', o));
          }, btn);
          return true;
        } catch {}
      }
    }

    // Fallback: ƒë√¥i khi portal g·∫Øn th·∫≥ng l√™n main frame
    const btnMain = await page.$(SELECTOR).catch(()=>null);
    if (btnMain) {
      try { await page.evaluate(el => el.scrollIntoView({block:'center',inline:'center'}), btnMain); } catch {}
      try { await btnMain.click({ delay: 20 }); return true; } catch {}
    }

    await sleep(120);
  }
  return false;
}


// T√¨m n√∫t theo TEXT ·ªü m·ªçi frame (kh√¥ng d√πng :has-text)
async function findButtonByTextAnyFrame(page, keywords = []) {
  const frames = page.frames();
  const lows = keywords.map(k => k.toLowerCase());
  for (const f of frames) {
    const handles = await f.$$('button, [role="button"]');
    for (const h of handles) {
      let txt = '';
      try {
        txt = await f.evaluate(el => (el.textContent || '').trim().toLowerCase(), h);
      } catch {}
      if (!txt) continue;
      if (lows.some(k => txt.includes(k))) {
        return { frame: f, handle: h, text: txt };
      }
    }
  }
  return null;
}
// B·∫•m n√∫t "X√≥a h·ªì s∆°" TRONG OVERLAY/MODAL (qu√©t c·∫£ body, dialog, portal, iframe, shadow) ‚Äì retry ng·∫Øn
async function clickDangerDeleteInAnyOverlay(page, { timeoutMs = 5000 } = {}) {
  const deadline = Date.now() + timeoutMs;

  // H√†m ch·∫°y trong frame: ∆∞u ti√™n n√∫t trong dialog, sau ƒë√≥ to√†n trang (ƒë·ªÅ ph√≤ng portal)
  const clickInFrame = async (frame) => {
    return await frame.evaluate(() => {
      const visible = (el) => {
        if (!el) return false;
        const st = getComputedStyle(el), r = el.getBoundingClientRect();
        return st.display !== 'none' && st.visibility !== 'hidden' && r.width > 1 && r.height > 1 && !el.disabled;
      };

      // 1) Dialog/modal container
      const dialog = document.querySelector('div[role="dialog"], [data-uia="modal"], [aria-modal="true"]') || document.body;

      // 2) Tick m·ªçi checkbox ‚ÄúT√¥i hi·ªÉu‚Äù n·∫øu c√≥
      dialog.querySelectorAll('input[type="checkbox"],[role="checkbox"]').forEach(el => {
        try {
          if (el instanceof HTMLInputElement) { if (!el.checked) el.click(); }
          else if (el.getAttribute('aria-checked') === 'false') el.click();
        } catch {}
      });

      // 3) T√¨m n√∫t ‚ÄúX√≥a h·ªì s∆° / Delete profile / Delete‚Äù
      const buttons = Array.from(dialog.querySelectorAll('button,[role="button"]'));
      const target = buttons.find(b => {
        const t = (b.textContent || '').trim().toLowerCase();
        return visible(b) && (
          t.includes('x√≥a h·ªì s∆°') || t.includes('xo√° h·ªì s∆°') ||
          t.includes('delete profile') || t === 'delete' || t.includes('delete')
        );
      }) || buttons.find(b => {
        // fallback: destructive button (m√†u ƒë·ªè) kh√¥ng c√≥ text r√µ
        const t = (b.textContent || '').trim().toLowerCase();
        return visible(b) && (b.dataset?.uia?.includes('delete') || /destructive|danger/i.test(b.className) || t.includes('x√≥a') || t.includes('xo√°'));
      });

      if (!target) return false;
      try { target.scrollIntoView({ block: 'center', inline: 'center' }); } catch {}
      try { target.focus(); } catch {}
      target.click();
      return true;
    }).catch(() => false);
  };

  // B·ªãt ph√≠m g√¢y ƒë√≥ng modal
  await page.evaluate(() => {
    const trap = (e) => {
      if (e.key === 'Escape' || e.key === 'Enter' || e.key === ' ') {
        e.stopImmediatePropagation(); e.stopPropagation(); e.preventDefault();
      }
    };
    window.__nfDelTrap2 && document.removeEventListener('keydown', window.__nfDelTrap2, true);
    window.__nfDelTrap2 = trap;
    document.addEventListener('keydown', trap, true);
  }).catch(() => {});

  // V√≤ng retry ng·∫Øn ƒë·∫øn khi click ƒë∆∞·ª£c ho·∫∑c h·∫øt th·ªùi gian
  while (Date.now() < deadline) {
    // ∆Øu ti√™n nh·ªØng frame ƒëang c√≥ dialog
    const frames = page.frames();
    let done = false;

    // Th·ª≠ trong frame c√≥ dialog tr∆∞·ªõc
    for (const f of frames) {
      const hasDialog = await f.$('div[role="dialog"], [data-uia="modal"], [aria-modal="true"]').catch(()=>null);
      if (hasDialog) { done = await clickInFrame(f); if (done) break; }
    }
    // N·∫øu ch∆∞a ƒë∆∞·ª£c, qu√©t t·∫•t c·∫£ frame (portal c√≥ th·ªÉ n·∫±m ngo√†i dialog)
    if (!done) {
      for (const f of frames) { done = await clickInFrame(f); if (done) break; }
    }
    if (done) {
      // g·ª° trap ph√≠m
      await page.evaluate(() => {
        if (window.__nfDelTrap2) {
          document.removeEventListener('keydown', window.__nfDelTrap2, true);
          window.__nfDelTrap2 = null;
        }
      }).catch(()=>{});
      return true;
    }
    await sleep(120);
  }

  // g·ª° trap ph√≠m n·∫øu th·∫•t b·∫°i
  await page.evaluate(() => {
    if (window.__nfDelTrap2) {
      document.removeEventListener('keydown', window.__nfDelTrap2, true);
      window.__nfDelTrap2 = null;
    }
  }).catch(()=>{});
  return false;
}

// T√¨m ph·∫ßn t·ª≠ theo danh s√°ch selector ·ªü m·ªçi frame; tr·∫£ v·ªÅ ph·∫ßn t·ª≠ ƒë·∫ßu ti√™n t·ªìn t·∫°i
async function findFirstVisibleInFrames(page, selectors = []) {
  for (const sel of selectors) {
    const hit = await queryInAllFrames(page, sel);
    if (hit) return hit;
  }
  return null;
}


async function typeProfileNameInConfirmDialog(page, name) {
  if (!name) return false;
  const INPUT_SELECTORS = [
    'div[role="dialog"] input[type="text"]',
    'div[role="dialog"] input',
    '[data-uia="modal"] input[type="text"]',
    '[data-uia="modal"] input',
  ];
  for (let t = 0; t < 10; t++) {
    for (const sel of INPUT_SELECTORS) {
      const hit = await queryInAllFrames(page, sel);
      if (hit?.handle) {
        try { await hit.frame.evaluate(el => el.focus(), hit.handle); } catch {}
        try { await hit.handle.click({ clickCount: 3 }); } catch {}
        try { await hit.handle.type(name, { delay: 40 }); } catch {}
        return true;
      }
    }
    await sleep(200);
  }
  return false;
}

async function confirmDangerInDialog(page) {
  const btn =
    await findButtonByTextAnyFrame(page, ['x√≥a h·ªì s∆°','xo√° h·ªì s∆°','delete profile','delete','ok','confirm','yes','c√≥']) ||
    await findFirstVisibleInFrames(page, ['div[role="dialog"] button','[data-uia="modal"] button']);
  if (btn?.handle) {
    await robustClickHandle(page, btn.handle);
    return true;
  }
  return false;
}

/* ===== Generic: t√¨m n√∫t theo selector ho·∫∑c theo t·ª´ kho√° TR√äN M·ªåI FRAME ===== */
async function findButtonAnyFrame(page, selectors = [], keywords = []) {
  for (const sel of selectors) {
    const found = await queryInAllFrames(page, sel);
    if (found) return found;
  }
  const frames = page.frames();
  for (const f of frames) {
    const nodes = await f.$$('button, [role="button"]');
    for (const n of nodes) {
      const t = (await f.evaluate(el => el.textContent || '', n)).trim().toLowerCase();
      if (keywords.some(k => t.includes(k))) {
        return { frame: f, handle: n };
      }
    }
  }
  return null;
}

/* ===== Identity verify modal: ch·ªçn "X√°c nh·∫≠n m·∫≠t kh·∫©u" v√† nh·∫≠p pass ===== */
async function handleIdentityVerifyModal(page, password) {
  // ch·ªù dialog xu·∫•t hi·ªán (t·ªëi ƒëa ~6s)
  for (let i = 0; i < 12; i++) {
    const open = await page.evaluate(() => !!(document.querySelector('[role="dialog"], [data-uia="modal"]'))).catch(()=>false);
    if (open) break;
    await sleep(500);
  }

  // t√¨m & b·∫•m "X√°c nh·∫≠n m·∫≠t kh·∫©u"
  const passOption = await findButtonByTextAnyFrame(page, [
    'x√°c nh·∫≠n m·∫≠t kh·∫©u','confirm with password','verify with password','password','m·∫≠t kh·∫©u'
  ]);
  if (passOption?.handle) {
    try { await passOption.frame.evaluate(el => el.scrollIntoView({block:'center',inline:'center'}), passOption.handle); } catch {}
    await robustClickHandle(page, passOption.handle);
  }

  // t√¨m √¥ password (retry qua animation/iframe)
  const PASS_INPUTS = [
    '[data-uia="collect-password-input-modal-entry"]',
    'input[name="password"]', 'input[type="password"]',
    'input[autocomplete="current-password"]', 'input[autocomplete="password"]',
  ];
  let passField = null;
  for (let t = 0; t < 20 && !passField; t++) {
    for (const sel of PASS_INPUTS) {
      const hit = await queryInAllFrames(page, sel);
      if (hit?.handle) { passField = hit; break; }
    }
    if (!passField) await sleep(250);
  }
  if (!passField) return false;

  // focus + type + submit
  try { await passField.frame.evaluate(el => el.focus(), passField.handle); } catch {}
  try { await passField.handle.click({ clickCount: 2 }); } catch {}
  try { await passField.handle.type(password, { delay: 40 }); } catch {}
  try { await page.keyboard.press('Enter'); } catch {}

  // ƒë·ª£i dialog ƒë√≥ng
  for (let i = 0; i < 20; i++) {
    const open = await page.evaluate(() => !!(document.querySelector('[role="dialog"], [data-uia="modal"]'))).catch(()=>false);
    if (!open) return true;
    await sleep(300);
  }
  return false;
}

// ƒê·ª£i URL c√≥ ?profilePinDeleted=success (sau khi remove lock)
async function waitForProfileDeletedSuccess(page, timeout = 15000) {
  return await page
    .waitForFunction(() => {
      try {
        const u = new URL(location.href);
        return u.pathname.includes('/account/profiles')
            && u.searchParams.get('profileDeleted') === 'success';
      } catch { return false; }
    }, { timeout })
    .then(() => true)
    .catch(() => false);
}

// Click "T·∫°o kh√≥a h·ªì s∆°" trong m·ªçi frame
async function clickCreateProfileLockAnyFrame(page) {
  const SEL = 'button[data-uia="profile-lock-off+add-button"], button[data-cl-command="AddProfileLockCommand"]';
  for (let attempt = 1; attempt <= 5; attempt++) {
    const found = await queryInAllFrames(page, SEL);
    if (!found) {
      await page.evaluate(() => window.scrollBy(0, window.innerHeight / 2));
      await sleep(300);
      continue;
    }
    const { frame, handle } = found;
    try { await frame.evaluate(el => el.scrollIntoView({ block: 'center', inline: 'center' }), handle); } catch {}
    try { await handle.click({ delay: 20 }); return true; } catch {}
    try {
      await frame.evaluate(el => {
        el.focus();
        const o = { bubbles: true, cancelable: true, view: window, buttons: 1 };
        el.dispatchEvent(new PointerEvent('pointerdown', o));
        el.dispatchEvent(new MouseEvent('mousedown', o));
        el.dispatchEvent(new MouseEvent('mouseup', o));
        el.dispatchEvent(new PointerEvent('pointerup', o));
        el.dispatchEvent(new MouseEvent('click', o));
      }, handle);
      return true;
    } catch {}
    try {
      const box = await handle.boundingBox();
      if (box) {
        await page.mouse.move(box.x + box.width / 2, box.y + box.height / 2, { steps: 6 });
        await page.mouse.down(); await sleep(30); await page.mouse.up();
        return true;
      }
    } catch {}
    await sleep(300);
  }
  return false;
}

async function robustClickHandle(page, handle) {
  try { await page.evaluate((el) => el.scrollIntoView({ block: 'center', inline: 'center' }), handle); } catch {}
  try { await handle.click({ delay: 20 }); return true; } catch {}
  try {
    await page.evaluate((el) => {
      el.focus();
      const opts = { bubbles: true, cancelable: true, view: window, buttons: 1 };
      el.dispatchEvent(new PointerEvent('pointerdown', opts));
      el.dispatchEvent(new MouseEvent('mousedown', opts));
      el.dispatchEvent(new MouseEvent('mouseup', opts));
      el.dispatchEvent(new PointerEvent('pointerup', opts));
      el.dispatchEvent(new MouseEvent('click', opts));
    }, handle);
    return true;
  } catch {}
  try {
    const box = await handle.boundingBox();
    if (box) {
      await page.mouse.move(box.x + box.width / 2, box.y + box.height / 2, { steps: 6 });
      await page.mouse.down(); await sleep(30); await page.mouse.up();
      return true;
    }
  } catch {}
  return false;
}

// ==== T√¨m n√∫t th√πng r√°c (Delete) tr√™n m·ªçi frame ====
async function findTrashButtonAnyFrame(page) {
  // C√°c selector kh·∫£ dƒ©: data-uia, command, ho·∫∑c SVG icon TrashCan
  const selectors = [
    'button[data-uia="account-profile-delete-button"]',
    '[data-cl-command="DeleteProfileCommand"]',
    // Nhi·ªÅu UI g·∫Øn aria-label ho·∫∑c title d·∫°ng Delete/X√≥a:
    'button[aria-label*="Delete" i]',
    'button[aria-label*="X√≥a" i], button[aria-label*="Xo√°" i]',
    'button[title*="Delete" i], button[title*="X√≥a" i], button[title*="Xo√°" i]',
  ];

  // 1) Th·ª≠ c√°c selector tr·ª±c ti·∫øp
  const hit = await findFirstVisibleInFrames(page, selectors);
  if (hit) return hit;

  // 2) Fallback: SVG TrashCan ‚Üí t√¨m button/ancestor click ƒë∆∞·ª£c
  const svgHit = await queryInAllFrames(page, 'svg[data-icon*="TrashCan" i], svg[data-icon-id*="TrashCan" i]');
  if (svgHit?.handle) {
    const { frame, handle } = svgHit;
    try {
      const btn = await frame.evaluateHandle((svg) => {
        let el = svg;
        for (let i = 0; i < 5 && el; i++) { // leo t·ªëi ƒëa 5 c·∫•p
          if (el.tagName === 'BUTTON' || el.getAttribute?.('role') === 'button') return el;
          el = el.parentElement;
        }
        return svg.closest?.('button,[role="button"]') || null;
      }, handle);
      if (btn && (await btn.asElement())) return { frame, handle: btn.asElement() };
    } catch {}
    // Fallback n·ªØa: click tr·ª±c ti·∫øp ancestor div c·ªßa svg
    return svgHit;
  }
  return null;
}

// ==== ƒêi·ªÅu h∆∞·ªõng c·ª©ng v√†o /settings/<ID> (kh√¥ng ph·∫£i lock) ====
async function hardGotoSettings(page, settingsId, refererUrl) {
  const settingsUrl = `https://www.netflix.com/settings/${settingsId}`;
  await page.setExtraHTTPHeaders({
    'Accept-Language': 'vi-VN,vi;q=0.9,en-US;q=0.8,en;q=0.7',
    ...(refererUrl ? { Referer: refererUrl } : {}),
  });

  const tryOnce = async (how) => {
    if (how === 'goto')
      await page.goto(settingsUrl, { waitUntil: 'networkidle2', timeout: 60000 }).catch(()=>{});
    else if (how === 'href')
      await page.evaluate((u)=>{ location.href = u; }, settingsUrl).catch(()=>{});
    else if (how === 'assign')
      await page.evaluate((u)=>{ window.location.assign(u); }, settingsUrl).catch(()=>{});

    await Promise.race([
      page.waitForNavigation({ waitUntil: 'networkidle2', timeout: 8000 }).catch(()=>null),
      page.waitForFunction(
        (id)=> new RegExp(`/settings/${id}($|[/?#])`).test(location.pathname),
        { timeout: 8000 }, settingsId
      ).catch(()=>null),
    ]);

    if (await isErrorPage(page)) {
      console.log('‚ö†Ô∏è Trang l·ªói khi v√†o settings ‚Üí reload‚Ä¶');
      await page.goto(page.url(), { waitUntil: 'networkidle2', timeout: 60000 }).catch(()=>{});
    }
    return new RegExp(`/settings/${settingsId}($|[/?#])`).test(page.url());
  };

  if (await tryOnce('goto'))   return true;
  if (await tryOnce('href'))   return true;
  if (await tryOnce('assign')) return true;
  return false;
}

// ==== T√¨m n√∫t "X√≥a h·ªì s∆°" tr√™n m·ªçi frame ====
async function findDeleteProfileButtonAnyFrame(page) {
  const selectors = [
    'button[data-uia="profile-settings-page+delete-profile+destructive-button"]', // b·∫°n cung c·∫•p
    '[data-cl-view="deleteProfile"][data-cl-command="SubmitCommand"]',
    'button[data-cl-view="deleteProfile"][data-cl-command="SubmitCommand"]',
    'button[data-uia*="delete-profile" i]',
  ];
  const hit = await findFirstVisibleInFrames(page, selectors);
  if (hit) return hit;

  const byText = await findButtonByTextAnyFrame(page, ['x√≥a h·ªì s∆°','xo√° h·ªì s∆°','delete profile']);
  return byText || null;
}


// ==== N·∫øu hi·ªán dialog/sheet x√°c nh·∫≠n th√¨ tick checkbox & b·∫•m x√°c nh·∫≠n ====
async function clickConfirmDeleteDialogsIfAny(page) {
  // Tick checkbox (n·∫øu c√≥)
  const checkSel = [
    'div[role="dialog"] input[type="checkbox"]',
    '[data-uia="modal"] input[type="checkbox"]',
    'div[role="dialog"] [role="checkbox"]',
  ];
  for (const sel of checkSel) {
    for (const f of page.frames()) {
      const boxes = await f.$$(sel);
      for (const b of boxes) {
        try {
          await f.evaluate(el => {
            if (el.getAttribute?.('aria-checked') === 'false') el.click();
            if (el instanceof HTMLInputElement && !el.checked) el.click();
          }, b);
        } catch {}
      }
    }
  }

  // B·∫•m n√∫t x√°c nh·∫≠n trong dialog
  const confirm =
    await findButtonByTextAnyFrame(page, ['x√≥a h·ªì s∆°','xo√° h·ªì s∆°','delete','ok','confirm','yes','c√≥']) ||
    await findFirstVisibleInFrames(page, ['div[role="dialog"] button','[data-uia="modal"] button']);
  if (confirm?.handle) await robustClickHandle(page, confirm.handle);
}

// Click 1 l·∫ßn duy nh·∫•t, kh√¥ng fallback (tr√°nh toggle ƒë√≥ng/m·ªü)
async function singleClick(page, handle) {
  try { await page.evaluate(el => el.scrollIntoView({block:'center',inline:'center'}), handle); } catch {}
  try { await page.evaluate(el => el.click(), handle); return true; } catch {}
  try { await handle.click(); return true; } catch {}
  return false;
}

// M·ªü overlay x√°c nh·∫≠n x√≥a v√† ch·ªù modal hi·ªán r√µ (kh√¥ng di chu·ªôt/scroll th√™m)
// === X√ìA H·ªí S∆† ATOMIC: m·ªü overlay & x√°c nh·∫≠n ngay trong c√πng 1 evaluate ===
async function atomicOpenAndConfirmDelete(page, profileNameForConfirm = null, timeoutMs = 2500) {
  const ok = await page.evaluate(async (profileName, timeout) => {
    // 1) M·ªü overlay x√≥a (click ngay n√∫t X√≥a h·ªì s∆° ·ªü trang /settings/<ID>)
    const openBtn =
      document.querySelector('button[data-uia="profile-settings-page+delete-profile+destructive-button"]') ||
      document.querySelector('[data-cl-view="deleteProfile"][data-cl-command="SubmitCommand"]') ||
      document.querySelector('button[data-cl-view="deleteProfile"][data-cl-command="SubmitCommand"]');
    if (!openBtn) return false;
    openBtn.click();

    // 2) Ch·ªù modal/dialog xu·∫•t hi·ªán (poll nhanh)
    const start = Date.now();
    function findDialog() {
      return document.querySelector('div[role="dialog"]') || document.querySelector('[data-uia="modal"]');
    }
    while (!findDialog()) {
      if (Date.now() - start > timeout) return false;
      await new Promise(r => setTimeout(r, 50));
    }
    const dialog = findDialog();

    // 3) Kho√° scroll ƒë·ªÉ tr√°nh overlay t·ª± ƒë√≥ng do wheel/scroll
    try { document.documentElement.style.overflow = 'hidden'; } catch {}

    // 4) Tick m·ªçi checkbox ‚ÄúT√¥i hi·ªÉu/Confirm‚Äù n·∫øu c√≥
    dialog.querySelectorAll('input[type="checkbox"], [role="checkbox"]').forEach(el => {
      try {
        if (el instanceof HTMLInputElement) {
          if (!el.checked) el.click();
        } else {
          if (el.getAttribute('aria-checked') === 'false') el.click();
        }
      } catch {}
    });

    // 5) N·∫øu y√™u c·∫ßu g√µ t√™n h·ªì s∆° ‚Üí ƒëi·ªÅn lu√¥n
    if (profileName) {
      const inp = dialog.querySelector('input[type="text"], input');
      if (inp) {
        try {
          inp.focus();
          inp.value = '';
          inp.dispatchEvent(new Event('input', { bubbles: true }));
          inp.value = profileName;
          inp.dispatchEvent(new Event('input', { bubbles: true }));
        } catch {}
      }
    }

    // 6) T√¨m n√∫t x√°c nh·∫≠n trong dialog v√† click
    const btns = Array.from(dialog.querySelectorAll('button, [role="button"]'));
    const danger =
      btns.find(b => /x√≥a h·ªì s∆°|xo√° h·ªì s∆°|delete profile/i.test(b.textContent || '')) ||
      btns.find(b => /delete|ok|confirm|yes|c√≥/i.test(b.textContent || ''));
    if (danger) {
      danger.click();
      return true;
    }
    return false;
  }, profileNameForConfirm, timeoutMs);

  return !!ok;
}

// ==== Utility: ki·ªÉm tra visible/enabled ====
function __isClickable(el) {
  if (!el) return false;
  const st = window.getComputedStyle(el);
  if (st.display === 'none' || st.visibility === 'hidden' || st.opacity === '0') return false;
  const rect = el.getBoundingClientRect();
  if (rect.width < 1 || rect.height < 1) return false;
  if (el.disabled) return false;
  return true;
}

// ==== Utility: t√¨m trong shadow DOM ====
function __queryDeep(root, selectors) {
  const stack = [root];
  while (stack.length) {
    const node = stack.pop();
    if (!node) continue;
    if (node.querySelector) {
      for (const sel of selectors) {
        const found = node.querySelector(sel);
        if (found) return found;
      }
    }
    // shadow root
    if (node.shadowRoot) stack.push(node.shadowRoot);
    // children
    if (node.children) for (const c of node.children) stack.push(c);
  }
  return null;
}

// ==== B·∫•m n√∫t "X√≥a h·ªì s∆°" (tr·∫£ true n·∫øu click ƒë∆∞·ª£c) ====

// ƒê√≥ng m·ªçi toast/snackbar c√≥ th·ªÉ che n√∫t trong modal
async function closeOverlaysIfAny(page) {
  await page.evaluate(() => {
    const candidates = [
      '[data-uia*="toast"] [data-uia*="close"]',
      '[data-uia*="message"] [data-uia*="close"]',
      '[aria-label*="ƒë√≥ng" i]',
      '[aria-label*="close" i]',
    ];
    for (const sel of candidates) {
      document.querySelectorAll(sel).forEach(btn => { try { btn.click(); } catch {} });
    }
  }).catch(()=>{});
}

// T√¨m dialog trong m·ªçi frame
async function findDialogAnyFrame(page) {
  const frames = page.frames();
  for (const f of frames) {
    const handle = await f.$('div[role="dialog"], [data-uia="modal"]');
    if (handle) return { frame: f, handle };
  }
  return null;
}

// B·∫•m n√∫t "X√≥a h·ªì s∆°" trong modal (ƒëa frame, c√≥ ƒë√≥ng toast, cu·ªôn, Enter/Space, click)

// === 1) Click n√∫t "X√≥a h·ªì s∆°" TR√äN TRANG /settings/<ID> (main frame, 1 l·∫ßn) ===
async function clickDeleteProfileButtonStrict(page, { retry = 3 } = {}) {
  const SELECTORS = [
    'button[data-uia="profile-settings-page+delete-profile+destructive-button"]',
    '[data-cl-view="deleteProfile"][data-cl-command="SubmitCommand"]',
    'button[data-cl-view="deleteProfile"][data-cl-command="SubmitCommand"]',
    'button[data-uia*="delete-profile" i]',
  ];
  const KEYWORDS = ['x√≥a h·ªì s∆°','xo√° h·ªì s∆°','delete profile','delete'];

  for (let i = 0; i < retry; i++) {
    const ok = await page.mainFrame().evaluate(({ SELECTORS, KEYWORDS }) => {
      const visible = el => {
        if (!el) return false;
        const st = getComputedStyle(el), r = el.getBoundingClientRect();
        return st.display!=='none' && st.visibility!=='hidden' && r.width>1 && r.height>1 && !el.disabled;
      };
      let btn = null;
      for (const sel of SELECTORS) {
        const cand = document.querySelector(sel);
        if (cand && visible(cand)) { btn = cand; break; }
      }
      if (!btn) {
        btn = Array.from(document.querySelectorAll('button,[role="button"]'))
          .find(b => visible(b) && KEYWORDS.some(k => (b.textContent||'').toLowerCase().includes(k)));
      }
      if (!btn) return false;
      try { btn.scrollIntoView({block:'center', inline:'center'}); } catch {}
      try { btn.focus(); } catch {}
      btn.click(); // 1 l·∫ßn duy nh·∫•t
      return true;
    }, { SELECTORS, KEYWORDS }).catch(() => false);

    if (ok) return true;
    await new Promise(r => setTimeout(r, 150));
  }
  return false;
}

// === 2) Click n√∫t "X√≥a h·ªì s∆°" TRONG MODAL (strict: ch·∫∑n ph√≠m, ƒë√≥ng toast, kh√¥ng blur) ===
async function clickConfirmDeleteInDialog(page, timeoutMs = 6000) {
  // ƒê·ª£i modal xu·∫•t hi·ªán
  const hasDialog = await page.waitForFunction(() =>
    !!(document.querySelector('div[role="dialog"]') || document.querySelector('[data-uia="modal"]')),
    { timeout: timeoutMs }
  ).then(() => true).catch(() => false);
  if (!hasDialog) return false;

  // ƒê√≥ng toast/snackbar che khu v·ª±c
  await page.evaluate(() => {
    const sel = ['[data-uia*="toast"] [data-uia*="close"]','[aria-label*="ƒë√≥ng" i]','[aria-label*="close" i]'];
    sel.forEach(s => document.querySelectorAll(s).forEach(b => { try { b.click(); } catch {} }));
  }).catch(()=>{});

  // NgƒÉn Escape/Enter l√†m ƒë√≥ng modal ho·∫∑c k√≠ch ho·∫°t th·ª© kh√°c ph√≠a sau (lock)
  await page.evaluate(() => {
    const trap = (e) => {
      if (e.key === 'Escape' || e.key === 'Enter' || e.key === ' ') {
        e.stopImmediatePropagation(); e.stopPropagation(); e.preventDefault();
      }
    };
    window.__nfDelTrap && document.removeEventListener('keydown', window.__nfDelTrap, true);
    window.__nfDelTrap = trap;
    document.addEventListener('keydown', trap, true);
  });

  // Click ƒë√∫ng n√∫t trong modal (qu√©t trong modal th√¥i)
  const clicked = await page.evaluate(() => {
    const dialog = document.querySelector('div[role="dialog"]') || document.querySelector('[data-uia="modal"]');
    if (!dialog) return false;

    // Kho√° scroll n·ªÅn + ƒë∆∞a modal v√†o gi·ªØa
    try { document.documentElement.style.overflow = 'hidden'; } catch {}
    try { dialog.scrollTop = dialog.scrollHeight; } catch {}

    const visible = el => {
      const st = getComputedStyle(el), r = el.getBoundingClientRect();
      return st.display!=='none' && st.visibility!=='hidden' && r.width>1 && r.height>1 && !el.disabled;
    };

    const btns = Array.from(dialog.querySelectorAll('button,[role="button"]'));
    const target =
      btns.find(b => /x√≥a h·ªì s∆°|xo√° h·ªì s∆°/i.test((b.textContent||'').trim())) ||
      btns.find(b => /delete/i.test((b.textContent||'').trim()));
    if (!target || !visible(target)) return false;

    try { target.scrollIntoView({block:'center', inline:'center'}); } catch {}
    try { target.focus(); } catch {}
    target.click(); // 1 l·∫ßn, kh√¥ng ph√°t ph√≠m
    return true;
  }).catch(() => false);

  // B·ªè trap ph√≠m (d·ªçn d·∫πp)
  await page.evaluate(() => {
    if (window.__nfDelTrap) {
      document.removeEventListener('keydown', window.__nfDelTrap, true);
      window.__nfDelTrap = null;
    }
  }).catch(()=>{});

  return !!clicked;
}

/* ============== X√ìA H·ªí S∆† ‚Äì ch·ªâ thao t√°c tr√™n /settings/<ID> ============== */
/* ============== X√ìA H·ªí S∆† ‚Äì ch·ªâ thao t√°c tr√™n /settings/<ID> ============== */
async function deleteProfileBySettingsId(
  page,
  settingsId,
  password,
  refererUrl,
  profileNameForConfirm = null
) {
  // ƒêi·ªÅu h∆∞·ªõng t·ªõi trang c√†i ƒë·∫∑t h·ªì s∆°
  const ok = await hardGotoSettings(page, settingsId, refererUrl);
  if (!ok) {
    console.log('‚ùå Kh√¥ng v√†o ƒë∆∞·ª£c trang settings.');
    return false;
  }

  // ===== Helper n·ªôi b·ªô: click n√∫t "X√≥a h·ªì s∆°" ch·∫Øc ch·∫Øn =====
  async function clickDeleteProfileButtonStrict() {
    const SELECTORS = [
      'button[data-uia="profile-settings-page+delete-profile+destructive-button"]',
      '[data-cl-view="deleteProfile"][data-cl-command="SubmitCommand"]',
      'button[data-cl-view="deleteProfile"][data-cl-command="SubmitCommand"]',
      'button[data-uia*="delete-profile" i]',
    ];
    const KEYWORDS = ['x√≥a h·ªì s∆°','xo√° h·ªì s∆°','delete profile','delete'];

    for (let attempt = 1; attempt <= 3; attempt++) {
      for (const f of page.frames()) {
        const clicked = await f.evaluate(({ SELECTORS, KEYWORDS }) => {
          function visible(el) {
            if (!el) return false;
            const st = window.getComputedStyle(el);
            if (st.display === 'none' || st.visibility === 'hidden' || st.opacity === '0') return false;
            const r = el.getBoundingClientRect();
            return r.width > 1 && r.height > 1 && !el.disabled;
          }
          let btn = null;
          for (const sel of SELECTORS) {
            const cand = document.querySelector(sel);
            if (cand && visible(cand)) { btn = cand; break; }
          }
          if (!btn) {
            const nodes = Array.from(document.querySelectorAll('button,[role="button"]'));
            btn = nodes.find(n => {
              const t = (n.textContent || '').toLowerCase();
              return visible(n) && KEYWORDS.some(k => t.includes(k));
            }) || null;
          }
          if (!btn) return false;
          try { btn.scrollIntoView({ block: 'center', inline: 'center' }); } catch {}
          try { btn.focus(); } catch {}
          btn.click();
          return true;
        }, { SELECTORS, KEYWORDS }).catch(() => false);
        if (clicked) return true;
      }
      await sleep(200);
    }
    return false;
  }

  // 1) Click n√∫t ‚ÄúX√≥a h·ªì s∆°‚Äù ƒë·ªÉ m·ªü overlay
console.log('üóëÔ∏è T√¨m & b·∫•m n√∫t "X√≥a h·ªì s∆°"‚Ä¶');
const ok1 = await safeRun(() => clickDeleteProfileButtonStrict(), false);
if (!ok1) { console.log('‚ùå Kh√¥ng click ƒë∆∞·ª£c n√∫t "X√≥a h·ªì s∆°".'); return false; }
await safeRun(() => Promise.race([
  page.waitForFunction(() =>
    !!(document.querySelector('div[role="dialog"]') || document.querySelector('[data-uia="modal"]')),
    { timeout: 8000 }
  ),
  // n·∫øu UI th·∫≠t s·ª± ƒëi·ªÅu h∆∞·ªõng th√¨ c≈©ng b·∫Øt ƒë∆∞·ª£c
  page.waitForNavigation({ waitUntil: 'domcontentloaded', timeout: 8000 })
]), null);

  // 2) Ch·ªù overlay (modal) xu·∫•t hi·ªán
  const overlayOk = await page.waitForFunction(() =>
    !!(document.querySelector('div[role="dialog"]') || document.querySelector('[data-uia="modal"]')),
    { timeout: 4000 }
  ).then(() => true).catch(() => false);
  if (!overlayOk) {
    console.log('‚ö†Ô∏è Overlay x√°c nh·∫≠n kh√¥ng hi·ªán. Th·ª≠ click l·∫°i‚Ä¶');
    if (!await clickDeleteProfileButtonStrict()) {
      console.log('‚ùå Kh√¥ng m·ªü ƒë∆∞·ª£c overlay x√°c nh·∫≠n.');
      return false;
    }
    await page.waitForFunction(() =>
      !!(document.querySelector('div[role="dialog"]') || document.querySelector('[data-uia="modal"]')),
      { timeout: 4000 }
    ).catch(() => {});
  }
  console.log('üóëÔ∏è B·∫•m "X√≥a h·ªì s∆°" trong modal x√°c nh·∫≠n‚Ä¶');
const ok2 = await safeRun(() => clickSecondDeleteButton(page, { timeoutMs: 6000 }), false);
if (!ok2) {
  await closeOverlaysIfAny(page);
  const retry = await safeRun(() => clickSecondDeleteButton(page, { timeoutMs: 6000 }), false);
  if (!retry) return false;
}


// (gi·ªØ nguy√™n c√°c b∆∞·ªõc sau ‚Äì n·∫øu UI y√™u c·∫ßu g√µ t√™n/checkbox/m·∫≠t kh·∫©u)
await typeProfileNameInConfirmDialog(page, profileNameForConfirm); // n·∫øu c·∫ßn g√µ t√™n
await clickConfirmDeleteDialogsIfAny(page); // tick checkbox / n√∫t OK ph·ª•
await confirmDangerInDialog(page);          // ph√≤ng khi Netflix render th√™m n√∫t x√°c nh·∫≠n
await handleIdentityVerifyModal(page, password); // b·∫Øt case y√™u c·∫ßu nh·∫≠p m·∫≠t kh·∫©u

  // 6) Ch·ªù t√≠n hi·ªáu ƒë√£ x√≥a ho·∫∑c quay v·ªÅ danh s√°ch h·ªì s∆°
  const redirected = await Promise.race([
    page.waitForFunction(() => /\/account\/profiles/i.test(location.pathname),
      { timeout: 15000 }).then(() => true).catch(() => false),
    page.waitForResponse(res => {
      const u = res.url().toLowerCase();
      return res.status() >= 200 && res.status() < 300 &&
             /(delete.*profile|profile.*delete|remove.*profile)/.test(u);
    }, { timeout: 15000 }).then(() => true).catch(() => false),
  ]);

  // 7) Ki·ªÉm tra danh s√°ch h·ªì s∆° ƒë·ªÉ ch·∫Øc ch·∫Øn h·ªì s∆° ƒë√£ bi·∫øn m·∫•t
  let removedByList = true;
  try {
    await page.goto('https://www.netflix.com/account/profiles',
                    { waitUntil: 'networkidle2', timeout: 15000 }).catch(()=>{});
    if (profileNameForConfirm) {
      const names = await getProfileNames(page);
      removedByList = !names.includes(profileNameForConfirm);
    }
  } catch {}

  if (redirected || removedByList) {
    console.log('‚úÖ ƒê√£ x√≥a h·ªì s∆° th√†nh c√¥ng.');
    return true;
  }

  console.log('‚ùå Kh√¥ng x√°c nh·∫≠n ƒë∆∞·ª£c tr·∫°ng th√°i x√≥a.');
  return false;
}

async function deleteProfileSmart(page, profileOrId, password, refererUrl) {
  // N·∫øu truy·ªÅn ID th·∫≥ng
  if (/^[A-Z0-9]+$/.test(profileOrId)) {
    return await deleteProfileBySettingsId(page, profileOrId, password, refererUrl);
  }

  // N·∫øu truy·ªÅn t√™n h·ªì s∆° ‚Üí m·ªü ƒë·ªÉ l·∫•y settingsId
  await page.goto('https://www.netflix.com/account/profiles', { waitUntil: 'networkidle2', timeout: 60000 });
  await gentleReveal(page);

  const names = await getProfileNames(page);
  if (!names.includes(profileOrId)) {
    console.log(`‚ùå Kh√¥ng th·∫•y h·ªì s∆° t√™n "${profileOrId}". Danh s√°ch:`, names);
    return false;
  }

  const res = await openProfileAndGetId(page, profileOrId, 5);
  if (!res) { console.log('‚ùå Kh√¥ng l·∫•y ƒë∆∞·ª£c settingsId t·ª´ t√™n h·ªì s∆°.'); return false; }

  return await deleteProfileBySettingsId(page, res.id, password, res.settingsUrl);
}


/* ============== ƒêi·ªÅu h∆∞·ªõng c·ª©ng v√†o /settings/lock/<ID> ============== */
async function hardGotoLock(page, settingsId, refererUrl) {
  const lockUrl = `https://www.netflix.com/settings/lock/${settingsId}`;
  await page.setExtraHTTPHeaders({
    'Accept-Language': 'vi-VN,vi;q=0.9,en-US;q=0.8,en;q=0.7',
    ...(refererUrl ? { Referer: refererUrl } : {}),
  });
  const tryOnce = async (how) => {
    if (how === 'goto')
      await page.goto(lockUrl, { waitUntil: 'networkidle2', timeout: 60000 }).catch(() => {});
    else if (how === 'href')
      await page.evaluate((u) => { location.href = u; }, lockUrl).catch(() => {});
    else if (how === 'assign')
      await page.evaluate((u) => { window.location.assign(u); }, lockUrl).catch(() => {});

    await Promise.race([
      page.waitForNavigation({ waitUntil: 'networkidle2', timeout: 8000 }).catch(() => null),
      page.waitForFunction(
        (id) => location.pathname.includes(`/settings/lock/${id}`) || /\/settings\//.test(location.pathname),
        { timeout: 8000 }, settingsId
      ).catch(() => null),
    ]);

    if (await isErrorPage(page)) {
      console.log('‚ö†Ô∏è Trang l·ªói sau khi v√†o lock ‚Üí reload‚Ä¶');
      await page.goto(page.url(), { waitUntil: 'networkidle2', timeout: 60000 }).catch(() => {});
    }
    if (new RegExp(`/settings/${settingsId}($|[/?#])`).test(page.url()) &&
        !new RegExp(`/settings/lock/${settingsId}($|[/?#])`).test(page.url())) {
      await page.evaluate((id) => {
        if (location.pathname.includes(`/settings/${id}`)) location.href = `/settings/lock/${id}`;
      }, settingsId).catch(() => {});
      await page.waitForFunction(
        (id) => location.pathname.includes(`/settings/lock/${id}`),
        { timeout: 10000 }, settingsId
      ).catch(() => {});
    }
    return new RegExp(`/settings/lock/${settingsId}($|[/?#])`).test(page.url());
  };
  if (await tryOnce('goto'))   return true;
  if (await tryOnce('href'))   return true;
  if (await tryOnce('assign')) return true;
  return false;
}

/* ============== Flow: t·ªõi pinentry (Create -> Confirm -> pass) ============== */
async function goPinAndAuth(page, settingsId, password, refererUrl) {
  const SUCCESS_RE = /\/settings\/lock\/pinentry/i;
  const CONFIRM_SEL = '[data-uia="account-mfa-button-PASSWORD+PressableListItem"]';
  const PASS_INPUT_SEL = '[data-uia="collect-password-input-modal-entry"]';
  const TIMEOUTS = { first: 12000, input: 12000, final: 20000, grace: 7000 };

  const okNav = await hardGotoLock(page, settingsId, refererUrl);
  if (!okNav) {
    console.log('‚ùå Kh√¥ng th·ªÉ ƒëi·ªÅu h∆∞·ªõng v√†o /settings/lock/', settingsId);
    return false;
  }
  if (SUCCESS_RE.test(page.url())) {
    console.log('‚úÖ ƒê√£ ·ªü pinentry (kh√¥ng c·∫ßn nh·∫≠p pass).');
    return true;
  }

  // ‚õî N·∫øu c√≥ REMOVE th√¨ KH√îNG l√†m g√¨ ·ªü ƒë√¢y, ƒë·ªÉ caller x·ª≠ l√Ω g·ª° tr∆∞·ªõc
  if (await hasRemoveButtonAnyFrame(page)) {
    console.log('üîí Th·∫•y n√∫t "X√≥a kh√≥a h·ªì s∆°" ‚Üí b·ªè qua Create/Edit, tr·∫£ v·ªÅ cho caller x·ª≠ l√Ω g·ª°.');
    return false;
  }

  // ‚úÖ Ch·ªâ click "T·∫°o kh√≥a h·ªì s∆°" (KH√îNG click Edit PIN)
  let clicked = await clickCreateProfileLockAnyFrame(page);

  // Fallback: k√≠ch ho·∫°t command tr·ª±c ti·∫øp
  if (!clicked) {
    const didCmd = await page.evaluate(() => {
      const el = document.querySelector('button[data-cl-command="AddProfileLockCommand"]');
      if (!el) return false;
      el.scrollIntoView({ block:'center', inline:'center' });
      el.click();
      return true;
    });
    if (didCmd) {
      console.log('üëâ K√≠ch ho·∫°t AddProfileLockCommand tr·ª±c ti·∫øp.');
      clicked = true;
    }
  }

  if (!clicked) {
    console.log('‚ùå Kh√¥ng click ƒë∆∞·ª£c "T·∫°o kh√≥a h·ªì s∆°".');
    try { await page.screenshot({ path: 'lock_debug.png', fullPage: true }); } catch {}
    if (!SUCCESS_RE.test(page.url())) return false;
  }

  // Sau click: ch·ªù Confirm(PASSWORD) HO·∫∂C ƒë√£ v√†o pinentry
  const stage1Confirm = page.waitForSelector(CONFIRM_SEL, { visible: true, timeout: TIMEOUTS.first })
    .then(() => 'confirm').catch(() => null);
  const stage1Url = page.waitForFunction(
    re => new RegExp(re,'i').test(location.href), { timeout: TIMEOUTS.first, polling: 300 }, SUCCESS_RE.source
  ).then(ok => ok ? 'url' : null).catch(() => null);
  const stage1 = await Promise.race([stage1Confirm, stage1Url]);

  if (stage1 === 'url') {
    console.log('‚úÖ V√†o pinentry ngay sau click.');
    return true;
  }
  if (stage1 !== 'confirm') {
    console.log('‚ùå Kh√¥ng th·∫•y Confirm & kh√¥ng v√†o pinentry.');
    try { await page.screenshot({ path: 'lock_after_click.png', fullPage: true }); } catch {}
    return false;
  }

  // Confirm ‚Üí nh·∫≠p pass ho·∫∑c redirect
  const confirmBtn = await page.$(CONFIRM_SEL);
  if (!confirmBtn) { console.log('‚ùå confirmBtn bi·∫øn m·∫•t.'); return false; }
  await clickWithAllTricks(page, confirmBtn);

  const stage2Input = page.waitForSelector(PASS_INPUT_SEL, { timeout: TIMEOUTS.input, visible: true })
    .then(() => 'input').catch(() => null);
  const stage2Url = page.waitForFunction(
    re => new RegExp(re, 'i').test(location.href),
    { timeout: TIMEOUTS.input, polling: 300 }, SUCCESS_RE.source
  ).then(ok => ok ? 'url' : null).catch(() => null);
  const stage2 = await Promise.race([stage2Input, stage2Url]);

  if (stage2 === 'url') {
    console.log('‚úÖ Redirect pinentry sau confirm (kh√¥ng c·∫ßn nh·∫≠p pass).');
    return true;
  }
  if (stage2 !== 'input') {
    console.log('‚ùå Kh√¥ng th·∫•y √¥ nh·∫≠p password.');
    return false;
  }

  // Nh·∫≠p m·∫≠t kh·∫©u + Enter
  console.log('üëâ Nh·∫≠p m·∫≠t kh·∫©u‚Ä¶');
  const passInput = await page.$(PASS_INPUT_SEL);
  if (!passInput) { console.log('‚ùå passInput bi·∫øn m·∫•t.'); return false; }
  await passInput.type(password, { delay: 50 });
  await page.keyboard.press('Enter');

  const finalOk = await page.waitForFunction(
    re => new RegExp(re, 'i').test(location.href),
    { timeout: TIMEOUTS.final, polling: 300 }, SUCCESS_RE.source
  ).then(() => true).catch(() => false);

  if (finalOk) { console.log('‚úÖ Pass ƒë√∫ng ‚Üí v√†o pinentry.'); return true; }

  console.log('‚è≥ Grace recheck‚Ä¶');
  const start = Date.now();
  while (Date.now() - start < TIMEOUTS.grace) {
    if (/\/settings\/lock\/pinentry/i.test(page.url())) { console.log('‚úÖ Pass ƒë√∫ng (grace).'); return true; }
    await sleep(300);
  }
  console.log('‚ùå Kh√¥ng redirect v·ªÅ pinentry.');
  return false;
}

/* ============== NH·∫¨P 4 S·ªê PIN & SAVE ============== */
async function setPinDigitsAndSave(page, pin4) {
  if (!/^\d{4}$/.test(pin4)) {
    console.log('‚ùå PIN ph·∫£i l√† 4 ch·ªØ s·ªë.');
    return false;
  }

  const PIN_INPUT_CANDIDATES = [
    'input.pin-number-input',
    "input[data-uia*='pin']",
    "input[name*='pin' i]",
    "input[id*='pin' i]",
    'input[autocomplete="one-time-code"]',
    'input[inputmode="numeric"]',
    'input[type="tel"][maxlength="1"]',
    'input[type="password"][maxlength="1"]',
    'input[type="text"][maxlength="1"]',
  ].join(',');

  const first = await page.waitForSelector(PIN_INPUT_CANDIDATES, { visible: true, timeout: 12000 }).catch(() => null);
  if (!first) { console.log('‚ùå Kh√¥ng t√¨m th·∫•y √¥ nh·∫≠p PIN.'); return false; }

  try {
    await page.evaluate((sel) => {
      document.querySelectorAll(sel).forEach((i) => {
        i.value = '';
        i.dispatchEvent(new Event('input', { bubbles: true }));
      });
    }, PIN_INPUT_CANDIDATES);
  } catch {}

  const inputs = await page.$$(PIN_INPUT_CANDIDATES);
  if (inputs.length >= 4) {
    for (let i = 0; i < 4; i++) {
      try {
        await inputs[i].focus();
        await inputs[i].click({ clickCount: 2 });
        await page.keyboard.type(pin4[i], { delay: 40 });
        if (i < 3) await page.keyboard.press('Tab');
      } catch {}
      await sleep(40);
    }
    try { await page.keyboard.press('Tab'); } catch {}
  } else {
    try { await first.click({ clickCount: 3 }); await page.keyboard.type(pin4, { delay: 60 }); } catch {}
  }

  const respPromise = page.waitForResponse((res) => {
    const u = res.url().toLowerCase();
    return (
      /(profile.*lock|lock.*profile|pinentry|profilelock|setpin|pin)/.test(u) &&
      res.request().method().match(/POST|PUT|PATCH/i) &&
      res.status() >= 200 && res.status() < 300
    );
  }, { timeout: 15000 }).catch(() => null);

  let save =
    (await page.$("button[data-uia*='save' i]")) ||
    (await page.$("button[type='submit']"));
  if (!save) {
    const found = await findButtonByTextAnyFrame(page, ['l∆∞u','save','done','ho√†n t·∫•t','update','c·∫≠p nh·∫≠t']);
    if (found?.handle) save = found.handle;
  }
  if (!save) { console.log('‚ùå Kh√¥ng t√¨m th·∫•y n√∫t L∆∞u.'); return false; }

  console.log('üëâ B·∫•m L∆∞u PIN‚Ä¶');
  if (!(await robustClickHandle(page, save))) {
    console.log('‚ùå Kh√¥ng click ƒë∆∞·ª£c n√∫t L∆∞u.');
    return false;
  }

  const successByUrlOrText = page.waitForFunction(() => {
    const body = (document.body?.innerText || '').toLowerCase();
    const leftPinEntry = /\/settings\/lock(\/|$)/.test(location.pathname) && !/pinentry/.test(location.pathname);
    const savedText = /(ƒë√£ l∆∞u|ƒë√£ c·∫≠p nh·∫≠t|saved|updated|ho√†n t·∫•t|done)/i.test(body);
    return leftPinEntry || savedText;
  }, { timeout: 12000 }).then(()=>true).catch(()=>false);

  const successByInputsGone = page.waitForFunction((sel) => {
    return document.querySelectorAll(sel).length < 4;
  }, { timeout: 12000 }, PIN_INPUT_CANDIDATES).then(()=>true).catch(()=>false);

  const successByRemoveBtn = (async () => {
    for (let i = 0; i < 12; i++) {
      if (await hasRemoveButtonAnyFrame(page)) return true;
      await sleep(1000);
    }
    return false;
  })();

  const successByResponse = (async () => {
    const r = await respPromise; return !!r;
  })();

  const okAny = await Promise.race([
    (async () => (await successByUrlOrText) || (await successByInputsGone) || (await successByRemoveBtn) || (await successByResponse))(),
    (async () => {
      try { await page.waitForNetworkIdle({ timeout: 8000 }).catch(()=>{}); } catch {}
      try { await page.reload({ waitUntil: 'networkidle2', timeout: 12000 }).catch(()=>{}); } catch {}
      return await hasRemoveButtonAnyFrame(page);
    })()
  ]);

  if (okAny) { console.log('‚úÖ ƒê√£ l∆∞u PIN 4 s·ªë.'); return true; }

  console.log('‚ö†Ô∏è Kh√¥ng x√°c nh·∫≠n ƒë∆∞·ª£c tr·∫°ng th√°i l∆∞u (c√≥ th·ªÉ v·∫´n OK). Th·ª≠ reload & ki·ªÉm tra l·∫°i l·∫ßn cu·ªëi‚Ä¶');

  try {
    const currentUrl = page.url();
    const m = currentUrl.match(/\/settings\/lock\/([^/?#]+)/i) || currentUrl.match(/\/settings\/([^/?#]+)/i);
    const id = m ? m[1] : null;
    if (id) await page.goto(`https://www.netflix.com/settings/lock/${id}`, { waitUntil: 'networkidle2', timeout: 15000 }).catch(()=>{});
  } catch {}
  const lastCheck = await hasRemoveButtonAnyFrame(page);
  if (lastCheck) { console.log('‚úÖ X√°c nh·∫≠n sau reload: PIN ƒë√£ ƒë∆∞·ª£c b·∫≠t (c√≥ n√∫t Remove).'); return true; }

  console.log('‚ùå Kh√¥ng th·ªÉ x√°c nh·∫≠n PIN ƒë√£ ƒë∆∞·ª£c l∆∞u.');
  return false;
}

/* ============== X√ìA KHO√Å H·ªí S∆† (Remove profile lock) ‚Äì ∆∞u ti√™n REMOVE ============== */
async function clickRemoveProfileLockButton(page) {
  const hit = await findButtonAnyFrame(
    page,
    [
      'button[data-uia="profile-lock-page+remove-button"]',
      'button[data-uia="profile-lock-remove-button"]',
      '[data-cl-command="RemoveProfileLockCommand"]',
    ],
    ['x√≥a', 'xo√°', 'remove', 'disable', 'delete']
  );
  if (!hit) return false;

  const { frame, handle } = hit;
  try { await frame.evaluate(el => el.scrollIntoView({ block: 'center', inline: 'center' }), handle); } catch {}
  if (!(await robustClickHandle(page, handle))) return false;

  // Confirm dialog
  for (let i = 0; i < 6; i++) {
    const confirmBtn =
      await findButtonByTextAnyFrame(page, ['remove','x√≥a','xo√°','ok','confirm','yes','c√≥','disable','delete']) ||
      await findFirstVisibleInFrames(page, ['[data-uia="modal"] button','[role="dialog"] button','div[role="dialog"] button']);
    if (confirmBtn?.handle) {
      await robustClickHandle(page, confirmBtn.handle);
      break;
    }
    await sleep(200);
  }

  // Password in modal (optional)
  const PASS_INPUT_CANDIDATES = [
    '[data-uia="collect-password-input-modal-entry"]',
    'input[name="password"]',
    'input[type="password"]',
    'input[autocomplete="current-password"]',
    'input[autocomplete="password"]',
  ];
  let passBox = null;
  for (let i = 0; i < 8 && !passBox; i++) {
    for (const sel of PASS_INPUT_CANDIDATES) {
      const hitSel = await queryInAllFrames(page, sel);
      if (hitSel) { passBox = hitSel.handle; break; }
    }
    if (!passBox) await sleep(250);
  }
  if (passBox) {
    try { await passBox.type(HARDCODED_PASSWORD, { delay: 40 }); } catch {}
    try { await page.keyboard.press('Enter'); } catch {}
  }

  // Save/Done button (if UI requires)
  for (let i = 0; i < 6; i++) {
    const saveBtn =
      await findButtonByTextAnyFrame(page, ['l∆∞u','save','done','ho√†n t·∫•t','update','c·∫≠p nh·∫≠t']) ||
      await findFirstVisibleInFrames(page, ["button[data-uia*='save' i]","button[type='submit']"]);
    if (saveBtn?.handle) {
      await robustClickHandle(page, saveBtn.handle);
      break;
    }
    await sleep(250);
  }

  return true;
}

// ==== CHECK: c√≥ n√∫t "X√≥a/Xo√°/Remove profile lock" kh√¥ng (tr√™n m·ªçi frame) ====
async function hasRemoveButtonAnyFrame(page) {
  const found = await findButtonAnyFrame(
    page,
    [
      'button[data-uia="profile-lock-page+remove-button"]',
      'button[data-uia="profile-lock-remove-button"]',
      '[data-cl-command="RemoveProfileLockCommand"]',
    ],
    [
      'x√≥a kh√≥a h·ªì s∆°', 'xo√° kh√≥a h·ªì s∆°', 't·∫Øt kh√≥a h·ªì s∆°', 'b·ªè kh√≥a h·ªì s∆°',
      'remove profile lock', 'disable profile lock', 'remove lock', 'delete profile lock',
      'x√≥a', 'xo√°', 'remove', 'disable', 'delete'
    ]
  );
  return !!found;
}

async function disableProfileLockByRemove(page, settingsId, password, refererUrl) {
  await hardGotoLock(page, settingsId, refererUrl);

  if (/\/settings\/lock\/pinentry/i.test(page.url())) {
    try { await page.goBack({ waitUntil: 'networkidle2', timeout: 8000 }); } catch {}
    if (/pinentry/i.test(page.url())) {
      try { await page.goto(`https://www.netflix.com/settings/lock/${settingsId}`, { waitUntil: 'networkidle2', timeout: 60000 }); } catch {}
    }
  }

  const removedClicked = await clickRemoveProfileLockButton(page);

  // N·∫øu Netflix hi·ªán modal x√°c minh ‚Üí x·ª≠ l√Ω
  await handleIdentityVerifyModal(page, password);

  if (!removedClicked) {
    const uncheck = await page.evaluate(() => {
      let changed = false;
      document.querySelectorAll('input[type="checkbox"]').forEach(ch => {
        if (ch.checked) { ch.click(); changed = true; }
      });
      return changed;
    });
    if (uncheck) {
      const saveBtn =
        await findButtonByTextAnyFrame(page, ['l∆∞u','save','done','ho√†n t·∫•t','update','c·∫≠p nh·∫≠t']) ||
        await findFirstVisibleInFrames(page, ["button[data-uia*='save' i]","button[type='submit']"]);
      if (saveBtn?.handle) await robustClickHandle(page, saveBtn.handle);
    } else {
      return false;
    }
  }

  // N·∫øu c√≤n modal password ‚Üí nh·∫≠p & Enter (backup)
  const PASS_INPUT_SEL = '[data-uia="collect-password-input-modal-entry"], input[name="password"], input[type="password"]';
  const passField = await queryInAllFrames(page, PASS_INPUT_SEL);
  if (passField?.handle) {
    try { await passField.handle.type(password, { delay: 40 }); } catch {}
    try { await page.keyboard.press('Enter'); } catch {}
  }

  // ∆Øu ti√™n x√°c nh·∫≠n theo query param
  const paramOk = await waitForProfilePinDeletedSuccess(page, 15000);
  if (paramOk) return true;

  // fallback: URL/Toast/Remove button bi·∫øn m·∫•t
  const ok = await Promise.race([
    page.waitForFunction(() =>
      /\/settings\/lock(\/|$)/.test(location.pathname) && !/pinentry/.test(location.pathname),
      { timeout: 15000 }).then(()=>true).catch(()=>false),
    page.waitForFunction(() =>
      /ƒë√£ l∆∞u|ƒë√£ c·∫≠p nh·∫≠t|saved|updated|ho√†n t·∫•t|done/i.test(document.body?.innerText||''),
      { timeout: 15000 }).then(()=>true).catch(()=>false),
  ]);

  await sleep(500);
  const stillHasRemove = await hasRemoveButtonAnyFrame(page);
  return (ok && !stillHasRemove);
}

/* ============== ƒê·∫∂T PIN th√¥ng minh (g·ª° tr∆∞·ªõc n·∫øu ƒë√£ c√≥) ============== */
async function setPinSmart(page, settingsId, password, newPin, refererUrl) {
  await hardGotoLock(page, settingsId, refererUrl);

  if (await hasRemoveButtonAnyFrame(page)) {
    console.log('üßπ Th·∫•y n√∫t "X√≥a kh√≥a h·ªì s∆°" ‚Üí g·ª° kh√≥a tr∆∞·ªõc‚Ä¶');
    const off = await disableProfileLockByRemove(page, settingsId, password, refererUrl);
    if (!off) {
      console.log('‚ùå Kh√¥ng g·ª° ƒë∆∞·ª£c kh√≥a.');
      return false;
    }
    console.log('‚úÖ ƒê√£ g·ª° kh√≥a h·ªì s∆° th√†nh c√¥ng, chuy·ªÉn sang t·∫°o PIN m·ªõi‚Ä¶');
  }

  const ok = await goPinAndAuth(page, settingsId, password, refererUrl);
  if (!ok) {
    console.log('‚ùå Kh√¥ng v√†o ƒë∆∞·ª£c pinentry sau khi g·ª°/ho·∫∑c ch∆∞a b·∫≠t.');
    return false;
  }

  return await setPinDigitsAndSave(page, newPin);
}

/* ============== MAIN ============== */
(async () => {
  try {
    const arg    = process.argv[2] || null;                    // T√™n h·ªì s∆° HO·∫∂C ID (ch·ªâ ch·ªØ & s·ªë)
    const pinArg = process.argv[3] || process.env.PIN || null; // PIN 4 s·ªë (tu·ª≥ ch·ªçn)

    const bundle = loadCookies(COOKIE_FILE);
    const cookiesFromFile = bundle ? toCookies(bundle) : null;

    browser = await puppeteer.launch({
      headless: false,
      executablePath: findChromePath(),
      userDataDir: USER_DATA_DIR,
      defaultViewport: null,
      args: [
        '--no-sandbox',
        '--disable-setuid-sandbox',
        '--lang=vi-VN',
        '--disable-blink-features=AutomationControlled',
      ],
    });

    page = await browser.newPage();
    page.setDefaultTimeout(30000);
    page.setDefaultNavigationTimeout(60000);

    await page.setUserAgent(
      'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/124.0.0.0 Safari/537.36'
    );
    await page.setExtraHTTPHeaders({ 'Accept-Language': 'vi-VN,vi;q=0.9,en-US;q=0.8,en;q=0.7' });

    // Cookie login (n·∫øu c√≥)
    await page.goto('https://www.netflix.com/', { waitUntil: 'domcontentloaded', timeout: 60000 });
    try { const cur = await page.cookies(); if (cur.length) await page.deleteCookie(...cur); } catch {}
    if (cookiesFromFile?.length || cookiesFromFile?.cookies) {
      for (const ck of (cookiesFromFile.cookies || cookiesFromFile)) {
        try { await page.setCookie(ck); } catch (e) { console.log('‚ùå cookie:', ck.name, e?.message || e); }
      }
    }

    // N·∫øu cookie fail ‚áí ƒëƒÉng nh·∫≠p b·∫±ng t√†i kho·∫£n/m·∫≠t kh·∫©u v√† L∆ØU cookies
    let loggedIn = await isLoggedIn(page);
    if (!loggedIn) {
      const ok = await loginWithCredentials(page, NETFLIX_EMAIL, NETFLIX_PASSWORD);
      if (!ok) {
        console.log('‚ùå Kh√¥ng ƒëƒÉng nh·∫≠p ƒë∆∞·ª£c b·∫±ng t√†i kho·∫£n/m·∫≠t kh·∫©u.');
        await new Promise(() => {}); // treo ƒë·ªÉ xem UI
        return;
      }
      loggedIn = true;
    }

    // L·∫•y settingsId
    let settingsId = null;
    let refererUrl = null;

    if (arg && /^[A-Z0-9]+$/.test(arg)) {
      settingsId = arg;
      await page.goto('https://www.netflix.com/account/profiles', { waitUntil: 'networkidle2', timeout: 60000 });
      refererUrl = 'https://www.netflix.com/account/profiles';
    } else {
      await page.goto('https://www.netflix.com/account/profiles', { waitUntil: 'networkidle2', timeout: 60000 });
      await gentleReveal(page);
      if (!arg) {
        const names = await getProfileNames(page);
        console.log('üîé H·ªì s∆° ph√°t hi·ªán:', names);
        console.log('‚û°Ô∏è  D√πng: node loginByCookie.js "T√™n h·ªì s∆°" 1234  HO·∫∂C  node loginByCookie.js SETTINGS_ID 1234');
        await new Promise(() => {}); // treo ƒë·ªÉ b·∫°n ƒë·ªçc log
        return;
      }
      const names = await getProfileNames(page);
      if (!names.includes(arg)) {
        console.log(`‚ùå Kh√¥ng t√¨m th·∫•y h·ªì s∆° t√™n "${arg}". Danh s√°ch:`, names);
        await new Promise(() => {});
        return;
      }
      const res = await openProfileAndGetId(page, arg, 5);
      if (!res) { console.log('‚ùå Kh√¥ng l·∫•y ƒë∆∞·ª£c settingsId.'); await new Promise(() => {}); return; }
      settingsId = res.id;
      refererUrl = res.settingsUrl;
    }

// ==== Action routing: delete | set-pin (4 digits) | just open ====
const rawArg = (process.argv[3] || process.env.PIN || '').trim();
const action = rawArg.toLowerCase();
const isFourDigits = /^\d{4}$/.test(rawArg);

if (action === 'delete' || process.env.DELETE_PROFILE === '1') {
  const profileName = (arg && !/^[A-Z0-9]+$/.test(arg)) ? arg : null;
  const okDel = await deleteProfileBySettingsId(page, settingsId, HARDCODED_PASSWORD, refererUrl, profileName);

  if (okDel) {
    try { await page.goto('https://www.netflix.com/account/profiles', { waitUntil:'networkidle2', timeout:20000 }); } catch {}
    console.log('‚úÖ X√≥a xong ‚Äì ƒëang ·ªü danh s√°ch h·ªì s∆°.');
  } else {
    console.log('‚ö†Ô∏è X√≥a kh√¥ng th√†nh c√¥ng ‚Äì gi·ªØ nguy√™n trang hi·ªán t·∫°i ƒë·ªÉ ki·ªÉm tra.');
  }
  await new Promise(()=>{});
  return;
}

if (isFourDigits) {
  const okPin = await setPinSmart(page, settingsId, HARDCODED_PASSWORD, rawArg, refererUrl);
  if (!okPin) console.log('‚ùå Kh√¥ng thay/ƒë·∫∑t ƒë∆∞·ª£c PIN. Xem log ·ªü tr√™n.');
  await new Promise(() => {}); 
  return;
}

// Kh√¥ng truy·ªÅn g√¨ ‚Üí ch·ªâ m·ªü trang kh√≥a h·ªì s∆°
await hardGotoLock(page, settingsId, refererUrl);
console.log('‚ÑπÔ∏è Kh√¥ng truy·ªÅn PIN ho·∫∑c delete ‚Üí ch·ªâ m·ªü trang kh√≥a h·ªì s∆°.');
await new Promise(() => {});
return;

  } catch (err) {
  if (isBenignNavError(err)) {
    // N·∫øu ƒë√£ ·ªü trang x√°c nh·∫≠n x√≥a th√†nh c√¥ng th√¨ im l·∫∑ng tho√°t
    try {
      const href = page?.url?.() || '';
      if (/\/account\/profiles\b/i.test(href)) {
        const okParam = /[?&]profileDeleted=success\b/i.test(href);
        if (okParam) {
          console.log('‚úÖ X√≥a h·ªì s∆° th√†nh c√¥ng (ƒë√£ v·ªÅ profiles?profileDeleted=success).');
          return; // KH√îNG in c·∫£nh b√°o n·ªØa
        }
      }
    } catch {}

    // N·∫øu ch∆∞a ch·∫Øc ch·∫Øn l√† th√†nh c√¥ng, v·∫´n in c·∫£nh b√°o v√† gi·ªØ tr√¨nh duy·ªát m·ªü
    console.warn('‚ö†Ô∏è B·ªè qua l·ªói do ƒëi·ªÅu h∆∞·ªõng:', err.message);
    await new Promise(() => {}); // gi·ªØ tr√¨nh duy·ªát m·ªü ƒë·ªÉ ki·ªÉm tra
    return;
  }
  console.error('‚ùå L·ªói ngo√†i √Ω mu·ªën:', err);
  await cleanup(1);
}
})(); // <- ƒê√ìNG IIFE ·ªû ƒê√ÇY
